ALL IN ONE FILE:

# Creating a namespace
apiVersion: v1
kind: Namespace
metadata:
  name: green
---
# creating pod
apiVersion: v1
kind: Pod
metadata:
  name: my-first-pod
spec:
  containers:
  - name: cont1
    image: httpd
    ports:
    - containerPort: 80
---
# pod on namespace
apiVersion: v1
kind: Pod
metadata:
  name: green
  namespace: green
spec:
  containers:
  - name: cont1
    image: httpd
    ports:
    - containerPort: 80
---
# pod with multiple container
apiVersion: v1
kind: Pod
metadata:
  name: multi-cont
spec:
  containers:
  - name: cont1
    image: httpd
    ports:
    - containerPort: 80
  - name: cont2
    image: nginx
    ports:
    - containerPort: 80
---
# replicaset
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: replicaset-example
spec:
  replicas: 5
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: cont1
        image: nginx
---
# DeamonSet
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: mynode-exporter
  labels:
    app: mynode-exporter
spec:
  selector:
    matchLabels:
      app: mynode-exporter
  template:
    metadata:
      labels:
        app: mynode-exporter
    spec:
       containers:
          - name: mynode-exporter
            image: prom/node-exporter:v0.18.1
            ports:
              - containerPort: 9100
                hostPort: 9100
                protocol: TCP
---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-example
spec:
  replicas: 5
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: cont1
        image: nginx
---

# Nodeport with pod:

apiVersion: v1
kind: Service
metadata:
  name: nodeport-svc
spec:
  selector:
    webserver: httpd
  type: NodePort 
  ports:
  - port: 80
    targetPort: 8080
    nodePort: 32008
---
apiVersion: v1
kind: Pod
metadata:
  name: nodeport-pod
  labels:
    webserver: httpd
spec:
  containers:
  - name: cont1
    image: httpd
    ports:
      - containerPort: 80
  - name: cont2
    image: jenkins/jenkins:lts
    ports:
      - containerPort: 8080
---
# cluster IP  (create two pods each with one container)

apiVersion: v1
kind: Service
metadata:
  name: cluster-svc
spec:
  selector:
    app: nginx
  type: ClusterIP
  ports:
  - port: 8082
    targetPort: 80
---
# target port
apiVersion: v1
kind: Service
metadata:
  name: target-nodeport
spec:
  selector:
    target: port
  type: NodePort 
  ports:
  - port: 80
    targetPort: 8080
    nodePort: 31000
---
apiVersion: v1
kind: Pod
metadata:
  name: target-pod
  labels:
    target: port
spec:
  containers:
  - name: cont1
    image: httpd
    ports:
      - containerPort: 80
  - name: cont2
    image: jenkins/jenkins:lts
    ports:
      - containerPort: 8080
---

# Load balancer

apiVersion: v1
kind: Service
metadata:
  name: loadbalancer-svc
spec:
  type: LoadBalancer
  selector:
    app: hello
  ports:
    - name: http
      protocol: TCP
      port: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loadbalancer-pod
spec:
  replicas: 3
  selector:
    matchLabels:
      app: hello
  template:
    metadata:
      labels:
        app: hello 
    spec:
      containers:
        - name: hello
          image: nginx
          ports:
            - containerPort: 80
            
